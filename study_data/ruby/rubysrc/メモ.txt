[while文]
条件が正しい間だけループを行う

	while文
	　処理
	end

　　何回ループしても処理が終わらない「無限ループ」に注意が必要。
　　rubyの場合、ctrl + c で強制終了。

使う繰り返し公文について
　whileとtimesなど、どちらを使うか迷ったときは
　繰り返し回数がわかっているかで考える。

　10回繰り返す　... times
　●●以下の間等... while

[繰り返し]
5.times do
5回繰り返し

5.times do |i|
iが0~5まで繰り返し、自動でインクリメント

when文(switch文)
case i
when 1
 puts i
when 2
 puts i
end

後判定のwhile文
　通常のwhile文は条件を満たさないときは、ループの中は一度も実行されない。
　　a = 10
　　while a < 10
	　puts "こんにちは"
	end

　ループの中を一度は実行したいときは、後判定のwhileを使う
	a = 10

	begin					...俗にいうDo while文
	　puts "こんにちは"
	end while a < 10		

練習問題	sample27.rb
　キーボードから数値を入力し、0が入力されるまでの和を求める。

　値を入力：１
　値を入力：２
　値を入力：３
　値を入力：０
　合計は６

　値を入力：１
　値を入力：２
　値を入力：３
　値を入力：４
　値を入力：０
　合計は１０

複合代入演算子
　和差積商などの演算子と代入演算子=を組み合わせたもの
　　a += b ...aにbを足したものをaに入れる。a = a + b と同じ。
　　a -= b ...aからbを引いたものをaに入れる。a = a - b と同じ。
　　a *= b ...aとbを掛けたものをaに入れる。a = a * b と同じ。
　　a /= b ...aをbで割ったものをaに入れる。a = a / b と同じ。
　　a %= b ...aをbで割ったものの余りをaに入れる。a = a % b と同じ。

開始値から終了値までのループ　sample28.rb

　開始値.upto(終了値) do |変数|
　　処理
　end

　※変数には開始値終了値までが、1ずつ増えながら入る

練習問題　sample29.rb
キーボードから値を入力し、１からその値までの数と、その数分の*を表示

値を入力：５
１：*
２：**
３：***
４：****
５：*****

i.times do
0からiになるまで繰り返す

配列

	1つの変数の中に複数の値を入れるもの。
	rubyの変数には方がないため、同じ配列の中に文字列型や数値型を混合されていれることができる。

配列の定義

　配列名 = []

　宣言と同時に値を入れるには

配列名 = [値１,値２,値３,…]

　とする

要素とインデックス

　配列に値を入れると先頭から0から始める
　配列に値を入れると先頭の要素から、0～あ始まる番号が振られる
　この番号のことをインデックスという

　　配列名 = ["a","b","c"]…aのインデックスは0、bは１、cは2になる

配列に値を代入する

　　配列名[インデックス] = 値
配列の値を参照する
　　配列名[インデックス]

p メソッド
　pメソッドはそのあとに指定された変数などの中身を表示するものになる
　表示する値の方によって出力が変わる

　　数値型
　　　そのまま出力
　　　　１→１

　　文字型
　　　前後を""で囲んで出力
　　　　例　"abc"

　　配列型
　　　[]で囲んですべての要素を出力
　　　　例　[1,2,3]

a = 1
b = "1"
c = [1]

p a >>1
p b >>"1"
p c >>[1]
が出力される

nil
　空を表す値。
　ｃ言語ではnull

練習問題

配列arrに１から１０まで値を入れ、それをループで回し出力しなさい

文字列型

　文字列を表すための型。
　文字列にする部分を、"(ダブルクォート)"または'(シングルクォート)'で囲む必要がある。

　例
　　"ABC"
	"ABC"

エスケープシーケンス
　\(バックスラッシュ)と英字であらわされる特殊な文字
　Windowsの場合、\になるときもある。

　主なエスケープシーケンス
　　\t ... 水平タブ
　　\n ... 改行
　　\\ ... \
	\" ... "
	\' ... '

式展開
　文字列の中に変数や計算式を埋め込むもの
　文字列の中に#{変数}であらわす

例
　tanka = 100
　price = 3
　puts "単価#{tanka}円の物を#{price}個を買うと#{tanka*price}円"

　単価100円のものを3個買うと300円と表示される

 " と ' の違いは
 　文字列は " か ' で囲む必要があるが、どちらで囲むかによって動作に違いがある。
 　・エスケープシーケンスが一部しか使えない。(\\と\'だけ使える)
 　・式展開ができない

 ヒアドキュメント
 　改行を含んだ文字列を設定するもの
 　入力されている文字列がそのまま文字列になる。
 　<<終了文字列の次の行から行頭にある終了文字列を含む
 <<EOF
 a
 ab
 abc
 EOF

 ヒアドキュメントのなかではシングルクォートやダブルクォートはそのまま出力されるが、#{}の式展開は実行される

ヒアドキュメントの中ではシングルクォートやダブルクォートはそのまま出力されるが、#{}の式展開は実行される。
は行頭に書く必要があり、その前にはスペースも入れない
終了文字の<<と終了文字の間に-を入れると行頭に書く必要はなくなる

シンボルクラス
　様々なものの名前を表すクラス。
　プログラムのコード上では文字列、中では数値で動作する。
　：シンボル名であらわす
　主にハッシュや引数などで利用される。

　title = :name
　puts title　　　-> nameと出力される

論理クラス(Booleanクラス)
　正しい（真、true）か正しくない（偽、false）を表すクラス
nilクラス
　空(から)を表すクラス。0や""(長さ0の文字列)とは異なるので注意

trueやfalse、nilのことを擬似変数という

if文等の真偽判定
　rubyの場合、falseとnil以外はすべてtrueになる
　a ||= 0とは
　a = a || 0のこと
　もしもaにnil(null)が入っていたら代わりに0を入れますよ。という意味
　aもしくは0という意味だから。
　活用法：ruby on railsではもしもaという変数がどこかで初期化されていなかったら
　　　　　0で初期化しますよ。ということになる

坂根
「
a ||= 0の意味
　a ||= 0 は a = a || 0と同じ意味になる
　aがnilかfalseの時には0を入れるという意味になり、aが初期化されていないときは0を入れ、それ以外の時はaの値をそのまま使うという意味になる。
　rubyの場合、よく使う書き方になる
　」

配列クラス
　一つの変数の中に複数の値が入っているものを配列という
　配列に入っているそれぞれの値を要素といい、要素には0から始まる番号が自動的に振ら　れる。この番号のことをインデックスという

配列の宣言
　主に3種類の宣言方法がある

　[]を使う方法
　　配列名 = []
　[]を使い、配列の宣言と同時に値を入れる
　　配列名 = [値１,値２,値３,値４…]
　Array.newを使う
　　配列名 = Array.newを使う
　　※配列名 = Array.new   ※配列名 = []と同じ意味

配列を使う理由
　配列は同じ種類や内容のデータをまとめて扱うことに適している。

　例、
　　・データの件数の取得
　　・次のデータのアドレス管理
　　・引数にして受け渡し

　等々

要素に値を設定する
　　配列名[インデックス] = 値

要素の値を参照する
　　配列名[インデックス]

配列に要素を追加する
　　配列名 << 値

rubyの配列について
　　現在の最大インデックスより、大きいインデックスを指定し
　　値を設定すると、指定したインデックスの要素に値が入り、
　　その間の要素にはnilが入る
　　またインデックスにマイナスの値を設定すると末尾からインデックスが
　　指定できる

%wや%iを使った配列の作成
　　文字列型やシンボル型の配列を作成するとき
　　%を使った指定の方法がある

　　　文字列型の配列
　　　　%w|a b c|  =>  ["a","b","c"]
　　　　※スペース区切りで文字列型の配列になる

　　　シンボル型の配列
　　　　%w|a b c|  =>  [:a,:b,:c]

　　|のほかに!や（）や｛｝など、英数字以外だったら何で囲ってもいい
　　また式展開やエスケープシーケンスを使うときには、それぞれ大文字にする

配列の入れ子(多次元配列)

		配列の中に配列がある状態を多次元配列という。
		C言語やJavaとは異なり、Rubyの場合、表ではなく
		配列の一つの要素が配列という考えになる。

多次元配列の定義

	配列名 = [["a","b","c"],["d","e","f","g"],["h","i"]]
	[]の中では改行ができるので

	配列名 = [
		["a","b","c"],
		["d","e","f","g"],
		["h","i"]
	]
	と記述することもできる

二次元配列の下記データを登録し出力してください。
配列arrの一つ目の要素
配列arrの二つ目の要素
配列arrの三つ目の要素

出力例
	大根	トマト	白菜
	犬		猫	猿	牛
	バラ	キク

ハッシュ(連想配列)
	配列はインデックスって要素にアクセスするが、
	ハッシュはキーと呼ばれるものを使ってアクセスする。

ハッシュの定義
	宣言は[]ではなく、{}を使う方法
	キーと値の両方を設定する必要があり、キー => 値で設定する

		ハッシュ名 = {キー => 値,キー => 値,キー => 値, …}

	キーには文字列やシンボルが使用される。

ハッシュの要素のアクセス

	ハッシュ名[キー]
	で各要素にアクセスできる

シンボルを使ったハッシュ
	ハッシュのキーは、多くの場合シンボルが利用される。

		hash = {:シンボル名 => 値, :シンボル名 => 値, …}
	
	シンボルを使ったハッシュの場合特別な宣言がある。

		hash = {シンボル名：値, シンボル名：値, …}

	上の宣言と下の宣言は同じものになる

ハッシュのeach
	ハッシュに対してもeach文が使える
	配列のハッシュと異なるのはキー用の変数と値用の変数が必要に
	なること

		ハッシュ.each do |キー用の変数、値用の変数|
			処理
		end
	
	変数を一つしか指定しない場合、変数には[キー,値]の配列で値が入る

ユーザー定義メソッド
	今まで使用していたputsやprintはシステムが定義しているメソッドになる
	このメソッドをユーザーが作成するものをユーザ定義メソッドという

ユーザー定義メソッドの作り方

	def メソッド名(引数)
		処理
	end

	※引数は省略可

ユーザー定義メソッドの呼び出し

	メソッド名(引数,引数,…)

ユーザ定義メソッドの命名
	アルファベットの小文字で始める。
	2文字目からはアルファベット、数字、アンダーバー
	メソッド名を見たら何をするメソッドか分かるようにする

戻り値について
	メソッドから呼び出し元に何らかの値を一つだけ返すことができる。
	この値のことを戻り値という
	メソッド内で
		return 値
	とすると、指定した値が戻り値になる。
	またrubyの場合、最後に実行したメソッドの値が自動で戻り値になる。

変数のスコープ
	変数が使用できる範囲を変数のスコープ（有効範囲）という
	英子文字または_から始まる　…　ローカル変数
	$から始まる　…　グローバル変数（プログラムの中で共通）
	@から始まる　…　インスタンス変数
	＠＠から始まる　…　クラス変数
	英大文字から始まる　…　定数（一度設定したら書き換えれない変数）
							ただし、rubyの場合、警告が出るが変更できる

オブジェクト指向プログラミングとは
	処理対象を一つの物（オブジェクト）として扱い、その集合体で一つのシステムを作るという考え方
	オブジェクトにはオブジェクトが持つ値（フィールド、プロパティ）とオブジェクトが行う動作（メソッド）がある

	例、
		車というシステム
			車は、タイヤ、エンジン、ハンドルなどのオブジェクトの集合体である。

	そのオブジェクトがどのようなプロパティやメソッドを持っているかを定義しているのがクラスになる
	クラスはオブジェクトの設計図になる

クラスとインスタンス
	インスタンスはオブジェクトと同じ意味になる
	明示的にクラスを宣言し、そのクラスから出てきたものをインスタンス。
	IntegerやStringなど、システムが作成したクラスからできたものをオブジェクトということが多い。
	クラスはあくまでもインスタンスの設計図となり、実際にデータや動作をすることは少なく、
	実際にデータを持ったり動作するのはインスタンスになる。

クラスの定義
	クラスは以下の通り定義を行う

		class クラス名
			def メソッド名(引数,引数,…)
				処理
			end
			def メソッド名(引数,引数,…)
				処理
			end
		end

		クラス名は英大文字で始める必要がある。
		プロパティは@変数名になり、すべてのメソッドで
		共通で使用できる

	クラスの作成例
		縦と横の長さを入力し、長方形の面積を求めるクラスShikaku

			class Shikaku
				def tate(t)
					@tate = t
				end
				def yoko(y)
					@yoko = y
				end
				def menseki
					@tate * @yoko
				end
			end

インスタンスの作成　->sample59 , 60
	インスタンスは、クラス名.newで作成できる
	例えば変数にインスタンスを代入するときは
		変数 = クラス名.new
	となる。

	作成したインスタンスのメソッドにアクセスするには
		インスタンス名.メソッド名(引数)
	とする

	クラス外部からプロパティに直接アクセスする方法はなく、メソッドを使い
	プロパティにアクセスする。

セッターとリーダー
	インスタンスのインスタンス変数にデータをセットするメソッドを
	セッターまたはライターという
	インスタンスのインスタンス変数からデータを取得するメソッドを
	ゲッターまたはリーダーという

=を使ったセッター	-> sample60の◆
	インスタンス変数にデータをセットするメソッドは、よく下記のように
	定義される
		def インスタンス名 = (引数)
			インスタンス変数 = 引数
		end
	こういう風に宣言することが、クラス外からデータをセットする際
	下記のように使うことができる
	　インスタンス名.インスタンス変数名 = 値
	値に入ったデータはメソッドの引数となり、インスタンス変数に
	設定したデータがセットされる

アクセスメソッド
	インスタンス変数にデータを取得したり、データを設定するメソッドを
	自動で定義してくれるメソッドがある。
	インスタンス変数にアクセスするメソッドのことをアクセサという

	データを設定するメソッド >> sample63と64で比較するとよい
		attr_reader : インスタンス変数名 … ゲッターの定義　メインメソッド視点で

		attr_writer : インスタンス変数名 … セッターの定義()　

		attr_accessor : インスタンス変数名 … セッターとゲッターの両方を宣言(def kyori(value)  @kyori = value  end)を(attr_accessor :kyori)だけで表現できる

	※インスタンス変数は , で区切ることができる

initializeメソッド
	インスタンスを作成時に処理を行うメソッド

	class Sample
	 def initialize
	 　処理
	 end
	end
	s = Sample.now <- ここでinitializeメソッドが実行される

主にインスタンス変数の初期化などに利用される
このようにインスタンスが作成されるときに、自動で実行されるメソッドを
コンストラクタという。

	initializeメソッドに引数を渡すことができる

		class Sample
			def initialize(引数1,引数2,…)
				処理
			end
		end
		s = Sample.new(引数１,引数2,…)

メソッドの引数の初期値(p387)
	ユーザ定義メソッドの引数は初期値を持たせることができる

		def メソッド名(引数=初期値, 引数=初期値)
			処理
		end

		メソッド名(引数)

	メソッドの呼び出し時に引数の数が不足している場合、
	左から順番に引数に値が入り、足りないところは初期値が
	設定される

	def method(a = 1, b = 2)
		p [a,b]
	end

	method(3,4) <-- [3,4]と表示される	
	method(3) <-- [3,2]と表示される	
	method <-- [1,2]と表示される	

	例えば、method(a,b)　method(3,4)なら分かると思うが、method(a,b) method(3)だったら右側の引数がなくてエラーになる
	だからmethod(a = 1, b = 2)のように初期値を最初から入れておく

引数の初期値の順番について sample73
	初期値の設定がされている引数と設定されていない引数が
	混合している場合、以下の順番で設定されている。

	すべての引数に初期値が設定されて理宇場合	
		def method(a = 1,b = 2,c = 3)
			左から順に値が入る
				method(10,20,30)	aは10,bは20,cは30
				method(10,20)		aは10,bは20,cは3
				method(10)			aは10,bは2,cは3

	右のの引数以外に初期値が設定されて理宇場合	
		def method(a = 1,b = 2,c = 3)
			初期値が入っていない引数を最後から入れ
			残りは左から順に値が入る
				method(10,20,30)	aは10,bは20,cは30
				method(10,20)		aは10,bは20,cは3
				method(10)			aは10,bは2,cは3

	真ん中の引数以外に初期値が設定されている場合
	def method(a = 1, b, c = 3)
	エラーになる

	基本的に必ず入れてほしい引数は左から書くので
	この書き方はしない。

キーワード引数	sample74
	シンボル型の引数を使うことで、何の引数に値を入れるか
	明確に指定できる

	def method(a: 1, b: 2, c: 3)
		method(a:10,b:20,c:30)	aは10,bは20,cは30
		method(b:10,c:20,a:30)	aは30,bは10,cは20
		method(c:10,a:20,b:30)	aは20,bは30,cは10